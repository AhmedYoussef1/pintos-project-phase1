            +--------------------+
            |        CS 140      |
            | PROJECT 1: THREADS |
            |   DESIGN DOCUMENT  |
            +--------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Ahmed Youssef Ahmed <27med99@gmail.com>
yousef hassan ibrahim <yousefhassan121999@gmail.com>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

                 ALARM CLOCK
                 ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

(in timer.c) >> static struct list sleepers; this is list of all sleeping threads.
(in timer.c) >> struct sleeping_thread {
		    int64_t timeToWake;
		    struct thread* th;
		    struct list_elem elem;
		};
	this is struct to store all information needed to wake up threads
	(timeToWake : when should i wake the thread ,th:pointer to the sleeping thread , elem:added to sleepers list).

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

1-check if the number of ticks to sleep current thread >0 then go to the next step else return.
2-first create object to the blocked thread(struct sleeping_thread st)
	& store the time to wake up this thread(timer_ticks () + ticks) & pointer to this thread.
3-disable interrupts.
4-add the current thread in the sorted list (sleepers).
5-block the current thread.
6-enable interrrupts.
7-in timer interrupt every tick increasing check if there is threads t
	o wake up(timeToWake <= timer_ticks()) if there wake up them.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

the threads that i have blocked in the sleeprs list sort them so we wake up all the thread 
that have lower or eqaul to timer_ticks() >>> timeToWake <= timer_ticks() <<< else break.

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

we avoid race conditions by using disable interrupt only 
	when we add a new thread to the sleepers list & block it >>>>>>>> old_level = intr_disable ();
							    list_insert_ordered(&sleepers, &st.elem, list_comp_sleep, NULL);
							    thread_block();
							    intr_set_level (old_level); <<<<<<<<<<

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

race condition impossible to occure becouse i have disable interrupt in timer_sleep() 
so it will not handle timer interrupt until timer_sleep() ended

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

this design is better becouse sorted list minimize the amount of time spent in 
the timer interrupt handler rather than unsorted list we need to check all the list 
to wake up all the thread that we should wake them 

             PRIORITY SCHEDULING
             ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

* Three members are added to "struct thread"
  - int basePri;
	Store thread basic priority.
	Used to restore thread priority to basic when there is no high priority donators.
  - struct semaphore *blocker;
	The semaphore which blocks the thread.
	Used in donation and nested donation to donate priority to the thread which holds this semaphore.
  - struct list locks;
	List of locks which thread holds.
	Used to track all possible donators to the thread.

* Two members are added to "struct semaphore"
  - struct thread *last_holder;
	Last thread held the semaphore.
	Priority is donated to this thread.
  - int heighest_pri;
	heighest thread priority among waiters on the semaphore.
	Can be used as the semaphore priority.

* one member is added to "struct lock"
  - struct list_elem elem;
	Used to add this lock in thread locks list.

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

* The data structure used to track priority donation.
  - Note that donation is handled in semaphores not locks.
  - "thread.blocker" used to store the blocker semaphore of the thread.
  - Thread donates its priority the the "last_holder" of "thread.blocker"
  - "thread.last_holder" used to store the holder of the semaphore.
  - When thread release a lock it has to determine its new priority.
  - "thread.locks" is a list of locks held by the thread. to determine the new priority
    the thread will loop throw locks and get the heighest priority among waiters on every lock
    using "semaphore.heighest_pri".
  - Finally thread will set its priority to the maximum of locks heighst priority and "basePri". 

* ASCII art to diagram a nested donation.
- The following diagram shows a nested donation case where T4 donates 
  its priority to T2 and T1. T2 has two locks L1 and L2
+--------------------------------------------------------------------------------------+
| Thread   : T(basePri, priority)                                                      |
| lock     : L                                                                         |
| T ---> L : thread T is blocked by lock L (T.blocker = L.sema)                        |
| L oooo T : lock L is held by thread T    (L.holder = T and L.sema.last_holder = T)   |
|                                                                                      |
|   +--------+        /``\       +------------+        /``\       +------------+       |
|   | T4(60) | ----> | L1 | oooo | T2(10, 60) | ----> | L3 | oooo | T1(20, 60) |       |
|   +--------+        \../       +------------+        \../       +------------+       |
|                                      o                ^                              |
|                                      o                |                              |
|                                      o                |                              |
|                                    /``\           +--------+                         |
|                                   | L2 |          | T3(40) |                         |
|                                    \../           +--------+                         |
+--------------------------------------------------------------------------------------+

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

* semaphore
  - New waiting thread is inserted to the semaphore waiters list using list_insert_ordered() and 
    sema_comp_priority() functions to order threads by priority in the list.
  - Special case: list order may be interrupted when a priority of waiting thread increases
    due to priority donation by another thread. in this case function fix_waiters() is called.

* lock
  - locks uses semaphores, locks works fine as semaphore works fine.

* condition variable
 - Using list_max() and cond_comp_priority() functions to get the thread with maximum priority 
   in the waiting list.  

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

- lock_acquire() call sema_down(semaphore sema).
  - in sema_down()
    - set current-thread blocker to this semaphore.
    - sema_down call donate().
      - in donate()
        - donate call donate_pri( thread_current() ).
	- donate_pri will try to donate priority of current-thread to the holder thread of 
          current-thread blocker.
	- if donate_pri failed to donate priority due to any case it will return false else 
          will return true.
	- if donate_pri successeded (returned true) donate will call 
          fix_waiters(thread_current()->blocker->last_holder)
	- because donate_pri changed the priority of "holder" thread, if "holder" thread is 
          waiting on semaphore, then semaphore waiters list will be no longer ordered so 
	  fix_waiters fix it by deleting and reinserting "holder" thread.
	- set next thread to donate: next = thread_current()->blocker->last_holder.
	- go in loop of nested donation: 
		while(donate_pri(next) success) 	
		  next = thread_current()->blocker->last_holder.
		  fix_waiters(next->blocker->last_holder).
   - if semaphore.value = 0 block thread.
   - if thread didn't blocked or after thread unblocked do the following:
   - set sema last_holder to the current-thread.
   - set current-thread blocker to null.
- add this lock to current-thread locks list.

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

- remove lock from current-thread locks list using list_remove()
- call sema_up()
- in sema_up
  - set sema last_holder to NULL
  - call set_new_pri()
    - set new_pri will call thread_set_priority(basePri) which will do the following:
    - loop throw current-thread locks list and find the lock with heighst priority.
    - set current-thread priority to the maximum of (lock with heighst priority, base priority).
    - call thread_yield_for_heighr().
    - thread_yield_for_heighr will make the current-thread yields only if there is a higher 
      priority thread in the ready list which is the case in this example.
    - current-thread will yield and the higher-priority thread will run.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

- When setting a new priority There is no way for race condition to occur because all variables 
  used in the function are local to it or associated with the current-thread only.
- After setting the priority thread may yield, that is the job of function thread_yield_for_heighr() which
  is called at the last line of thread_set_priority().
- Thread_yield_for_heighr() will check if there is a heigher thread in the current ready-list, if so the 
  current-thread will yield.
- Checking the ready-list needs disabling interrupts because the ready-list may be modified at anytime.

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

- We first considered handling donation in locks, but Because locks use semaphores We choosed to handle donation
  in semaphores not locks, semaphores already handle syncronization so no need for extra interrupt-disable.
- Donation logic is divided among multiple functions which made it easy to write the code.

              ADVANCED SCHEDULER
              ==================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

Answer:
1-define new file real_numbers.h:

	#ifndef REAL_NUMBERS_H
	#define REAL_NUMBERS_H

	struct real {
	    int val;
	};

	struct real int_to_real(int num);
	int real_to_int(struct real r);
	int real_to_int_round(struct real r);

	struct real real_add(struct real r1, struct real r2);
	struct real real_sub(struct real r1, struct real r2);
	struct real real_mul(struct real r1, struct real r2);
	struct real real_mul_int(struct real r, int num);
	struct real real_div(struct real r1, struct real r2);
	struct real real_div_int(struct real r, int num);

	#endif
2-new file real_numbers.c:

	#include "threads/real-numbers.h"
	#include <inttypes.h>
	#include <debug.h>
	#include <stdio.h>

	const int real_f = 16384; // 2^14

	struct real int_to_real(int num) {
	    struct real r;
	    r.val = num * real_f;
	    return r;
	}

	int real_to_int(struct real r) {
	    return r.val / real_f;
	}

	int real_to_int_round(struct real r) {
	    if(r.val >= 0)
		return (r.val + real_f/2) / real_f;
	    else
		return (r.val - real_f/2) / real_f;
	}

	struct real real_add(struct real r1, struct real r2) {
	    struct real result;
	    result.val = r1.val + r2.val;
	    return result;
	}

	struct real real_sub(struct real r1, struct real r2) {
	    struct real result;
	    result.val = r1.val - r2.val;
	    return result;
	}

	struct real real_mul(struct real r1, struct real r2) {
	    struct real result;
	    result.val = ((int64_t) r1.val) * r2.val / real_f;
	    return result;
	}

	struct real real_mul_int(struct real r, int num) {
	    struct real result;
	    result.val = r.val * num;
	    return result;
	}

	struct real real_div(struct real r1, struct real r2) {
	    ASSERT(r2.val != 0);
	    
	    struct real result;
	    result.val = ((int64_t) r1.val) * real_f/ r2.val;
	    return result;
	}

	struct real real_div_int(struct real r, int num) {
	    ASSERT(num != 0);

	    struct real result;
	    result.val = r.val / num;
	    return result;
	}
3-in thread.h we add:
	
	in thread struct:
		struct real recent_cpu;             /* Estimate of the CPU time the thread has used*/
		int nice;                           /* Nice value */
	global variable:
		struct real load_avg;


---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

- load_avg = (59/60)*load_avg + (1/60)*ready_threads.
- recent_cpu = (2*load_avg)/(2*load_avg + 1) * recent_cpu + nice.
- priority = PRI_MAX - (recent_cpu / 4) - (nice * 2).

- 3 threads in the ready list.
- initialize load_avg=0.

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0	0   0	0  63  61  59	  A
 4	4   0	0  62  61  59     A
 8	8   0   0  61  61  59     B
12      8   4   0  61  60  59     A
16      12  4   0  60  60  59     B
20      12  8   0  60  59  59     A
24      16  8   0  59  59  59     C
28	16  8   4  59  59  58     B
32	16  12  4  59  58  58     A
36	20  12  4  58  58  58     C

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

The ambiguities is when we have more than one thread in the ready list have the same priority
the rule to resolve this by using round robin scheduler & this match the behavior of my scheduler

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

we put inside timer interrupt that we should do in it any other code we have add it in thread.c & timer 
interrupt have to change priority for the current thread every 4 ticks & every second we need to update 
load average and recent cpu.

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

* Advantages:
  - There is minimum amount of code repetition.
  - There is minimum amount of "if(!mlfqs)" conditions.
  - design is simple and readable.

* Disadvantages:
  - Some code related only to priority scuduler was surrounded with "if(!mlfqs)". What if was it required
    to add an extra scheduler? there will be if conditions everywhere and this will reduce maintainability.
  - There is some code related only to priority scheduler was initialized with values (memory consumption) however there
    is no need for it like "thread.locks" and "thread.basePri". we decided to do that to keep the design simple.

* A better design:
  - Instead of having "if(mlfqs)" conditions we could make an extra file with the basic functions any scheduler will need.
  - Make two seperate scheduler files one for priority and one for advanced with the same functions names, every scheduler 
    will use the the basic functions provided by the basic file.
  - When OS load based on mlfqs value the OS will choose to load one scheduler file in the system and ignore the other.
  - In this way we can add many schedulers as we want without interfering with each other.

>> C6: The assignment explains arithmetic for fixed-point math in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point math, that is, an abstract data
>> type and/or a set of functions or macros to manipulate fixed-point
>> numbers, why did you do so?  If not, why not?

- fixed-point numbers were defined as "sturct real".
- fixed-point arithmetics were done using functions like real_add(r1, r2) and real_mul(r1, r2).
- fixed-point numbers are needed only in the advanced scheduler, no need to make an abstract data type.
- This is simple, has good performance and get the job done.

               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
